# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/educations', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Education. As you add validations to Education, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      educationName: 'Computer Science',
      educationType: 'major',
      educationDescription: 'Study of computers and computational systems'
    }
  end

  let(:invalid_attributes) do
    {
      educationName: nil, # Name can't be nil
      educationType: 'invalid_type', # Assuming 'type' has a validation for specific values
      educationDescription: '' # Assuming description can't be blank
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Education.create! valid_attributes
      get educations_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      education = Education.create! valid_attributes
      get education_url(education)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_education_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      education = Education.create! valid_attributes
      get edit_education_url(education)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Education' do
        expect do
          post educations_url, params: { education: valid_attributes }
        end.to change(Education, :count).by(1)
      end

      it 'redirects to the created education' do
        post educations_url, params: { education: valid_attributes }
        expect(response).to redirect_to(education_url(Education.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Education' do
        expect do
          post educations_url, params: { education: invalid_attributes }
        end.to change(Education, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post educations_url, params: { education: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          educationName: 'Software Engineering',
          educationType: 'minor',
          educationDescription: 'Study of software development and engineering principles'
        }
      end

      it 'updates the requested education' do
        education = Education.create! valid_attributes
        patch education_url(education), params: { education: new_attributes }
        education.reload
        expect(education.educationName).to eq('Software Engineering')
        expect(education.educationType).to eq('minor')
        expect(education.educationDescription).to eq('Study of software development and engineering principles')
      end

      it 'redirects to the education' do
        education = Education.create! valid_attributes
        patch education_url(education), params: { education: new_attributes }
        education.reload
        expect(response).to redirect_to(education_url(education))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        education = Education.create! valid_attributes
        patch education_url(education), params: { education: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested education' do
      education = Education.create! valid_attributes
      expect do
        delete education_url(education)
      end.to change(Education, :count).by(-1)
    end

    it 'redirects to the educations list' do
      education = Education.create! valid_attributes
      delete education_url(education)
      expect(response).to redirect_to(educations_url)
    end
  end
end
