# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  let(:alternative_valid_attributes) do
    {
      email: 'testuser-alternative@example.com', # different email
      full_name: 'Test User',
      uid: '1234567890',
      avatar_url: 'http://example.com/avatar.jpg',
      user_type: 'user'
    }
  end
  let(:new_attributes) do
    {
      email: 'testuser@example.com',
      full_name: 'Test Newuser', # changed name
      uid: '1234567890',
      avatar_url: 'http://example.com/avatar.jpg',
      user_type: 'user'
    }
  end

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  include TestAttributes

  describe 'GET /index' do
    it 'renders a successful response' do
      # signs in user with valid attributes
      sign_in User.create! valid_attributes
      get users_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      user = User.create! valid_attributes
      sign_in user
      get user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      # signs in user with valid attributes
      sign_in User.create! valid_attributes
      get new_user_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      admin = User.create! valid_admin_attributes
      user = User.create! valid_attributes
      sign_in admin
      get edit_user_url(user)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new User' do
        sign_in User.create! valid_admin_attributes
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        sign_in User.create! valid_admin_attributes
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(user_url(User.last))
      end
    end

    context 'with valid parameters but not admin' do
      it 'does not create a new User' do
        sign_in User.create! valid_attributes
        expect do
          post users_url, params: { user: valid_admin_attributes }
        end.to change(User, :count).by(0)
      end

      it 'redirects to the root path' do
        sign_in User.create! valid_attributes
        post users_url, params: { user: valid_admin_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        sign_in User.create! valid_admin_attributes
        expect do
          post users_url, params: { user: invalid_attributes }
        end.to change(User, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        sign_in User.create! valid_admin_attributes
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      it 'updates the requested user' do
        sign_in User.create! valid_admin_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        new_attributes.each do |key, value|
          expect(user.send(key)).to eq(value)
        end
      end

      it 'redirects to the user' do
        sign_in User.create! valid_admin_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(response).to redirect_to(user_url(user))
      end

      it 'does not allow user to change other users if not admin' do
        sign_in User.create! alternative_valid_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        valid_attributes.each do |key, value|
          expect(user.send(key)).to eq(value)
        end
      end

      it 'does not allow user to change other users if not admin and redirects to root' do
        sign_in User.create! alternative_valid_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        sign_in User.create! valid_admin_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested user' do
      sign_in User.create! valid_admin_attributes
      user = User.create! valid_attributes
      expect do
        delete user_url(user)
      end.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      sign_in User.create! valid_admin_attributes
      user = User.create! valid_attributes
      delete user_url(user)
      expect(response).to redirect_to(users_url)
    end

    it "doesn't allow user to delete other users if not admin" do
      sign_in User.create! valid_attributes
      user = User.create! valid_admin_attributes
      expect do
        delete user_url(user)
      end.to change(User, :count).by(0)
    end

    it "doesn't allow user to delete other users if not admin and redirects to root" do
      sign_in User.create! valid_attributes
      user = User.create! valid_admin_attributes
      delete user_url(user)
      expect(response).to redirect_to(root_path)
    end
  end
end
