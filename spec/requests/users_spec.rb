# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/users', type: :request do
  let(:alternative_valid_attributes) do
    {
      email: 'testuser-alternative@example.com', # different email
      full_name: 'Test User',
      uid: '1234567890',
      avatar_url: 'http://example.com/avatar.jpg',
      user_type: 'user',
      linkedin_url: 'https://linkedin.com/in/testuser'
    }
  end
  let(:new_attributes) do
    {
      email: 'testuser@example.com',
      full_name: 'Test Newuser', # changed name
      uid: '1234567890',
      avatar_url: 'http://example.com/avatar.jpg',
      user_type: 'user',
      linkedin_url: 'https://linkedin.com/in/testuser'
    }
  end

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  include TestAttributes
  include RequestHelpers

  describe 'GET /index' do
    context 'when user is admin' do
      let(:officer) { User.create!(valid_officer_attributes) }

      before do
        sign_in officer
      end

      it 'renders a successful response with all attributes by default' do
        get users_url
        expect(response).to be_successful
        expect(response.body).to include(officer.full_name, officer.email, officer.phone_number.to_s, officer.class_year.to_s)
      end

      it 'allows selection of specific attributes' do
        get users_url, params: { select_attributes: %w[email full_name] }
        expect(response).to be_successful
        expect(response.body).to include(officer.email, officer.full_name)
        expect(response.body).not_to include(officer.phone_number.to_s, officer.class_year.to_s)
      end

      it 'sorts users by the selected attribute' do
        other_officer = User.create!(valid_officer_attributes.merge(full_name: 'Zach', email: 'test-email2@email.com'))
        get users_url, params: { sort: 'full_name', direction: 'asc' }
        expect(response).to be_successful
        response_body = response.body

        # Make sure the users are displayed in the correct order (simple string check)
        expect(response_body.index(officer.full_name)).to be < response_body.index(other_officer.full_name)
      end

      it 'filters users by full name' do
        other_officer = User.create!(valid_officer_attributes.merge(full_name: 'Zach', email: 'test-email2@email.com'))
        get users_url, params: { search: officer.full_name }
        expect(response).to be_successful
        expect(response.body).to include(officer.full_name)
        expect(response.body).not_to include(User.last.full_name)
      end
    end

    context 'when user is not admin' do
      let(:user) { User.create!(valid_attributes) }

      before do
        sign_in user
      end

      it 'renders a successful response with limited attributes by default' do
        get users_url
        expect(response).to be_successful
        expect(response.body).to include(user.full_name, user.email, user.phone_number.to_s, user.class_year.to_s)
      end

      it 'allows selection of specific attributes for non-admin' do
        get users_url, params: { select_attributes: %w[email full_name] }
        expect(response).to be_successful
        expect(response.body).to include(user.email, user.full_name)
        expect(response.body).not_to include(user.phone_number.to_s, user.class_year.to_s)
      end

      it 'doesn\'t allow selection of privileged attributes' do
        get users_url, params: { select_attributes: %w[dietary_restriction] }
        expect(response).to be_successful
        expect(response.body).not_to include(user.dietary_restriction)
      end

      it 'sorts users by selected attribute for non-admin' do
        other_user = User.create!(valid_attributes.merge(full_name: 'Zach', email: 'test-email2@example.com'))
        get users_url, params: { sort: 'full_name', direction: 'asc' }
        expect(response).to be_successful
        response_body = response.body

        # Make sure the users are displayed in the correct order (simple string check)
        expect(response_body.index(user.full_name)).to be < response_body.index(other_user.full_name)
      end

      it 'filters users by full name for non-admin' do
        get users_url, params: { search: user.full_name }
        other_user = User.create!(valid_attributes.merge(full_name: 'Zach', email: 'test-email2@example.com'))
        expect(response).to be_successful
        expect(response.body).to include(user.full_name)
        expect(response.body).not_to include(User.last.full_name)
      end
    end

    context 'when user is not logged in' do
      it 'redirects to signin page' do
        test_redirect_to_signin(users_url, nil)
      end
    end
  end

  describe 'GET /show' do
    context 'when user is admin' do
      it 'renders a successful response with all attributes' do
        admin = User.create! valid_admin_attributes
        user = User.create! valid_attributes
        sign_in admin
        get user_url(user)
        expect(response).to be_successful
        expect(response.body).to include(user.email, user.phone_number.to_s, user.class_year.to_s)
      end
    end

    context 'when user is not admin' do
      it 'renders a successful response with limited attributes' do
        main_user = User.create! alternative_valid_attributes
        user = User.create! valid_attributes
        sign_in main_user
        get user_url(user)
        expect(response).to be_successful
        expect(response.body).to include(user.full_name, user.email, user.phone_number.to_s, user.class_year.to_s)
        # Ensure restricted attributes are not shown
        expect(response.body).not_to include(user.dietary_restriction)
      end
    end

    context 'when user is not admin but is viewing his own profile' do
      it 'renders a successful response with limited attributes' do
        user = User.create! valid_attributes
        sign_in user
        get user_url(user)
        expect(response).to be_successful
        expect(response.body).to include(user.full_name, user.email, user.phone_number.to_s, user.class_year.to_s, user.dietary_restriction)
      end
    end
  end
  
    describe 'GET /new' do
      it 'renders a successful response response if atleast officer' do
        # signs in user with valid attributes
        sign_in User.create! valid_officer_attributes
        get new_user_url
        expect(response).to be_successful
      end
    end
  
    describe 'GET /new' do
      it 'redirects to root if not atleast officer' do
        # signs in user with valid attributes
        user = User.create! alternative_valid_attributes
        sign_in User.create! valid_attributes
        test_redirect_to_root(edit_user_url(user), nil)
      end
    end
  
  describe 'GET /edit' do
    it 'renders a successful response if atleast officer' do
      officer = User.create! valid_officer_attributes
      user = User.create! valid_attributes
      sign_in officer
      get edit_user_url(user)
      expect(response).to be_successful
    end

    it 'renders a successful response if user is editing their own profile' do
      user = User.create! valid_attributes
      sign_in user
      get edit_user_url(user)
      expect(response).to be_successful
    end

    it 'redirects to root if user is not admin and not editing their own profile' do
      user = User.create! valid_attributes
      sign_in User.create! alternative_valid_attributes
      test_redirect_to_root(edit_user_url(user), nil)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new User' do
        sign_in User.create! valid_officer_attributes
        expect do
          post users_url, params: { user: valid_attributes }
        end.to change(User, :count).by(1)
      end

      it 'redirects to the created user' do
        sign_in User.create! valid_officer_attributes
        post users_url, params: { user: valid_attributes }
        expect(response).to redirect_to(user_url(User.last))
      end
    end

    context 'with valid parameters but not admin' do
      it 'does not create a new User' do
        sign_in User.create! valid_attributes
        expect do
          post users_url, params: { user: valid_admin_attributes }
        end.to change(User, :count).by(0)
      end

      it 'redirects to the root path' do
        sign_in User.create! valid_attributes
        post users_url, params: { user: valid_admin_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new User' do
        sign_in User.create! valid_officer_attributes
        expect do
          post users_url, params: { user: invalid_attributes }
        end.to change(User, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        sign_in User.create! valid_officer_attributes
        post users_url, params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      it 'updates the requested user' do
        sign_in User.create! valid_officer_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        new_attributes.each do |key, value|
          if key != :linkedin_url
            expect(user.send(key)).to eq(value)
          end
        end
      end

      it 'redirects to the user' do
        sign_in User.create! valid_officer_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        user.reload
        expect(response).to redirect_to(user_url(user))
      end

      it 'does not allow user to change other users if not admin' do
        sign_in User.create! alternative_valid_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        valid_attributes.each do |key, value|
          if key != :linkedin_url
            expect(user.send(key)).to eq(value)
          end
        end
      end

      it 'does not allow user to change other users if not admin and redirects to root' do
        sign_in User.create! alternative_valid_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: new_attributes }
        expect(response).to redirect_to(root_path)
      end

      it 'does allow user to his own profile' do
        user = User.create! valid_attributes
        sign_in user
        patch user_url(user), params: { user: new_attributes }
        user.reload
        new_attributes.each do |key, value|
          if key != :linkedin_url
            expect(user.send(key)).to eq(value)
          end
        end
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        sign_in User.create! valid_officer_attributes
        user = User.create! valid_attributes
        patch user_url(user), params: { user: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested user' do
      sign_in User.create! valid_officer_attributes
      user = User.create! valid_attributes
      expect do
        delete user_url(user)
      end.to change(User, :count).by(-1)
    end

    it 'redirects to the users list' do
      sign_in User.create! valid_officer_attributes
      user = User.create! valid_attributes
      delete user_url(user)
      expect(response).to redirect_to(users_url)
    end

    it "doesn't allow user to delete other users if not admin" do
      sign_in User.create! valid_attributes
      user = User.create! valid_admin_attributes
      expect do
        delete user_url(user)
      end.to change(User, :count).by(0)
    end

    it "doesn't allow user to delete other users if not admin and redirects to root" do
      sign_in User.create! valid_attributes
      user = User.create! valid_admin_attributes
      delete user_url(user)
      expect(response).to redirect_to(root_path)
    end
  end

  describe 'PATCH /update_profile' do
    context 'with all fields completed' do
      it 'updates the current user profile and marks account as complete' do
        user = User.create! valid_attributes
        sign_in user
        patch update_profile_users_url, params: { user: {
          phone_number: '1234567890',
          class_year: '2024',
          ring_date: '2024-05-15',
          grad_date: '2024-06-10',
          birthday: '2000-01-01',
          shirt_size: 'M',
          dietary_restriction: 'None',
          linkedin_url: 'https://www.linkedin.com/in/testuser'
          } }

          user.reload
          expect(user.phone_number).to eq('1234567890')
          expect(user.class_year).to eq(2024)
          expect(user.ring_date).to eq(Date.parse('2024-05-15'))
          expect(user.grad_date).to eq(Date.parse('2024-06-10'))
          expect(user.birthday).to eq(Date.parse('2000-01-01'))
          expect(user.shirt_size).to eq('M')
          expect(user.dietary_restriction).to eq('None')
          expect(user.linkedin_url).to eq('testuser')
          expect(user.account_complete).to be_truthy
        end

        it 'redirects to the root path with a success notice after successful update' do
          user = User.create! valid_attributes
          sign_in user
          patch update_profile_users_url, params: { user: {
            phone_number: '1234567890',
            class_year: '2024',
            ring_date: '2024-05-15',
            grad_date: '2024-06-10',
            birthday: '2000-01-01',
            shirt_size: 'M',
            dietary_restriction: 'None',
            linkedin_url: 'https://www.linkedin.com/in/testuser'
            } }

        expect(response).to redirect_to(root_path)
        expect(flash[:notice]).to eq('Profile updated successfully.')
      end
    end

    context 'with invalid parameters' do
      it 'renders the complete_profile template with an alert' do
        user = User.create! valid_attributes
        sign_in user
        patch update_profile_users_url, params: { user: { phone_number: '', class_year: '' } }
        expect(response.body).to include('Complete Your Profile')
        expect(flash[:alert]).to eq('All fields must be filled out.')
      end
    end
  end

  describe 'GET /complete_profile' do
    it 'renders the complete_profile template for the current user' do
      user = User.create! valid_attributes
      sign_in user
      get complete_profile_users_url
      expect(response).to be_successful
      expect(response.body).to include('Complete Your Profile')
    end

    it 'redirects to sign_in if not signed in' do
      get complete_profile_users_url
      expect(response).to redirect_to(new_user_session_url)
    end
  end
end
